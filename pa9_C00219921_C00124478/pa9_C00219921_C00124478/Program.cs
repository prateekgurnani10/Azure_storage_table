/**
Authors:                         Apurvakumar Patel  Prateek Gurnani
CLIDs:                           C00219921  C00124478
Class:                           CMPS 358
Assignment:                      Assignment 9
Due Date:                        April 1st 2019, 11:55 PM
Description:                     In this assignment a user is a presented with a menu in which they can choose to
                                 write entities, display all entities, display entities of book type, audience, or media
Certification of Authenticity:   We certify that the code in the classes of this project, other than code provided the instructions this assignment or generated by Visual Studio is entirely our own work. 
*/

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Auth;
using Microsoft.WindowsAzure.Storage.Table;

namespace pa9_C00219921_C00124478
{
    /* Class that inherits TableEntity so that the object instances
     * that we need to store in Azure Storage can be created.
    */
    public class StorageEntity : TableEntity
    {
        //Empty constructor
        public StorageEntity() { }
        //Constructor for partition key and row key
        public StorageEntity(string list, string id) : base(list, id) { }

        //Objects for each type 
        public string BookType { get; set; }
        public string Audience { get; set; }
        public string Media { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
    }

    class Program
    {

        /* This method defines a storage table, creates five objects as storage entities
         * and adds it to the table
        */
        public static void WriteToTable(string[] en)
        {
            string accountName = "akprateekbooks";
            string accountKey = "Kz+mBEc/sJty2r1xqZjc89YBcQGZI0umHJQWtEfsvBOQwitxIp6hx8lBPd4OSdm0T4Ko973D7LuAcepj/K6VZQ==";


            try
            {

                StorageCredentials creds = new StorageCredentials(accountName, accountKey);
                CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);
                //CloudStorageAccount account = CloudStorageAccount.DevelopmentStorageAccount;

                CloudTableClient client = account.CreateCloudTableClient();
                CloudTable table = client.GetTableReference("Books");

                table.CreateIfNotExists();
                Console.WriteLine(table.Uri.ToString());

                //Store each info in array
                StorageEntity book = new StorageEntity("books", Guid.NewGuid().ToString())

                {
                    BookType = en[0],
                    Audience = en[1],
                    Media = en[2],
                    Author = en[3],
                    Title = en[4],

                };

                //excute the insert operation to add the given data to the table
                TableOperation insertOperation = TableOperation.InsertOrReplace(book);
                table.Execute(insertOperation);
                Console.WriteLine("Inserted!");

            }

            catch (Exception)
            {
                Console.WriteLine("Something went wrong!");

            }

        }
            
        /* This method performs the given query that gets all objects found in the storage
         * table and places it in a list and then traverses through it and outputs
         * all the data
        */
        public static void ReadFromTable()
        {
            string accountName = "akprateekbooks";
            string accountKey = "Kz+mBEc/sJty2r1xqZjc89YBcQGZI0umHJQWtEfsvBOQwitxIp6hx8lBPd4OSdm0T4Ko973D7LuAcepj/K6VZQ==";
            try
            {
                StorageCredentials creds = new StorageCredentials(accountName, accountKey);
                CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);
                //CloudStorageAccount account = CloudStorageAccount.DevelopmentStorageAccount;

                CloudTableClient client = account.CreateCloudTableClient();
                CloudTable table = client.GetTableReference("Books");

                TableQuery<StorageEntity> query = new TableQuery<StorageEntity>().Where(TableQuery.GenerateFilterCondition("PartitionKey",
                    QueryComparisons.Equal, "books"));

                List<StorageEntity> list = table.ExecuteQuery(query).ToList<StorageEntity>();

                //loops through the entities in list and displays all the entities

                if (!list.Any())
                {
                    Console.WriteLine();
                    Console.WriteLine("No data exists!");
                    Console.WriteLine();
                }
                else
                {
                    foreach (StorageEntity i in list)
                    {
                        Console.WriteLine("Partition Key: " + i.PartitionKey);
                        Console.WriteLine("Row Key: " + i.RowKey);
                        Console.WriteLine("Book Type: " + i.BookType);
                        Console.WriteLine("Audience: " + i.Audience);
                        Console.WriteLine("Media: " + i.Media);
                        Console.WriteLine("Author: " + i.Author);
                        Console.WriteLine("Title: " + i.Title);
                        Console.WriteLine("-----------------------------------------------------");

                    }
                }
                    Console.WriteLine();
                
            }
            //Displays "Nothing" when the table is empty and nothing can be read
            catch (Exception)
            {
                Console.WriteLine();
                Console.WriteLine("Nothing");
                Console.WriteLine();
            }

        }

        /* This method performs the given query that gets all objects found in the storage
         * table and places it in a list and then traverses through it and outputs
         * data based on specific entity
        */
        public static void ReadSpecificFromTable(string choice, string val)
        {
            string accountName = "akprateekbooks";
            string accountKey = "Kz+mBEc/sJty2r1xqZjc89YBcQGZI0umHJQWtEfsvBOQwitxIp6hx8lBPd4OSdm0T4Ko973D7LuAcepj/K6VZQ==";
            try
            {
                StorageCredentials creds = new StorageCredentials(accountName, accountKey);
                CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);
                //CloudStorageAccount account = CloudStorageAccount.DevelopmentStorageAccount;

                CloudTableClient client = account.CreateCloudTableClient();
                CloudTable table = client.GetTableReference("Books");

                TableQuery<StorageEntity> query = new TableQuery<StorageEntity>().Where(TableQuery.GenerateFilterCondition(choice,
                    QueryComparisons.Equal, val));               

                List<StorageEntity> list = table.ExecuteQuery(query).ToList<StorageEntity>();

                if (!list.Any())
                {
                    Console.WriteLine();
                    Console.WriteLine("No data exists!");
                    Console.WriteLine();
                }
                else
                {                    
                    foreach (StorageEntity i in list)
                    {
                        Console.WriteLine("Partition Key: " + i.PartitionKey);
                        Console.WriteLine("Row Key: " + i.RowKey);
                        Console.WriteLine("Book Type: " + i.BookType);
                        Console.WriteLine("Audience: " + i.Audience);
                        Console.WriteLine("Media: " + i.Media);
                        Console.WriteLine("Author: " + i.Author);
                        Console.WriteLine("Title: " + i.Title);
                        Console.WriteLine("-----------------------------------------------------");

                    }
                    Console.WriteLine();
                }



            }
            //Displays "Nothing" when the table is empty and nothing can be read
            catch (Exception)
            {
                Console.WriteLine();
                Console.WriteLine("Nothing");
                Console.WriteLine();
            }

        }
        
        static void Main(string[] args)
        {

            Menu();
            Console.Write("Please select one of the options above: ");
            string choice = Console.ReadLine();
            while (choice != "0")
            {
                switch (choice)
                {
                    /* if user selects option 1 then they are prompted to enter the required info and then 
                     * writes it to the table
                    */
                    case "1":
                        string[] addEntity = new string[5];
                        Console.Write("Enter the type of the book (Fiction or Non Fiction): ");
                        string a = Console.ReadLine();
                        string b = a.ToLower();
                        b = b.Replace("-", " ");
                        TextInfo caseHandle1 = new CultureInfo("en-US", false).TextInfo;
                        string c = caseHandle1.ToTitleCase(b);
                        addEntity[0] = c;                                                                       
                       
                        Console.Write("Enter the audience of the book (child or young adult): ");
                        string d = Console.ReadLine();
                        string e = d.ToLower();
                        e = e.Replace("-", " ");
                        TextInfo caseHandle2 = new CultureInfo("en-US", false).TextInfo;
                        string f = caseHandle2.ToTitleCase(e);
                        addEntity[1] = f;
                        
                        Console.Write("Enter the media of the of the book (audio, print, electronic): ");
                        string g = Console.ReadLine();
                        string h = g.ToLower();
                        TextInfo caseHandle3 = new CultureInfo("en-US", false).TextInfo;
                        string i = caseHandle3.ToTitleCase(h);
                        addEntity[2] = i;
                                                                       
                        Console.Write("Enter the author of the book: ");
                        string gi = Console.ReadLine();
                        string hi = g.ToLower();
                        TextInfo caseHandle6 = new CultureInfo("en-US", false).TextInfo;
                        string ij = caseHandle6.ToTitleCase(h);
                        addEntity[3] = ij;
                        
                        Console.Write("Enter the title of the book: ");                    
                        addEntity[4] = Console.ReadLine();

                        Console.WriteLine();

                        WriteToTable(addEntity);

                        Console.WriteLine("Writing done...");
                        Console.WriteLine();
                        break;

                    //if user selects option 2 then it displays all the entities
                    case "2":
                        ReadFromTable();
                        Console.WriteLine();
                        break;

                    /* if user selects option 3 then user is asked for the genre they
                     * want to filter by
                    */
                    case "3":
                        Console.Write("Please enter the type of the book (Ex. Fiction): ");
                        string aa = Console.ReadLine();
                        string bb = aa.ToLower();
                        bb = bb.Replace("-", " ");
                        TextInfo caseHandle = new CultureInfo("en-US", false).TextInfo;
                        string ii = caseHandle.ToTitleCase(bb);
                        ReadSpecificFromTable("BookType", ii);
                        break;

                    /* if user selects option 4 then user is asked for the audience they
                     * want to filter by
                     */
                    case "4":
                        Console.Write("Please enter the audience of the book (Ex. Young Adult): ");
                        string hh = Console.ReadLine();
                        string kk = hh.ToLower();
                        TextInfo caseHandle5 = new CultureInfo("en-US", false).TextInfo;
                        string jj = caseHandle5.ToTitleCase(kk);
                        ReadSpecificFromTable("Audience", jj);
                        break;

                    /* if user selects option 4 then user is asked for the media they
                     * want to filter by
                     */
                    case "5":
                        Console.Write("Please enter the media of the book(Ex. Print): ");
                        string cc = Console.ReadLine();
                        string dd = cc.ToLower();
                        TextInfo caseHandle4 = new CultureInfo("en-US", false).TextInfo;
                        string ee = caseHandle4.ToTitleCase(dd);
                        ReadSpecificFromTable("Media", ee);
                        break;                                      
                    default:
                        Console.WriteLine("\nFollow Directions!\n");
                        break;
                }
                Menu();
                Console.Write("Please select one of the options above: ");
                choice = Console.ReadLine();
            }
            Console.WriteLine();
            Console.WriteLine("Program had ended!");
            Console.WriteLine();
        }

        //Main menu
        public static void Menu()
        {
            Console.WriteLine("********************************Main Menu********************************");
            Console.WriteLine("0) Exit the program");
            Console.WriteLine("1) Add new entities");
            Console.WriteLine("2) Display all entities");
            Console.WriteLine("3) Display by Book Type");
            Console.WriteLine("4) Display by Audience");
            Console.WriteLine("5) Display by Media");            
            Console.WriteLine();
        }

    }
}